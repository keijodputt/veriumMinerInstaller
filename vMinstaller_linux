#!/bin/bash

#Philipp "3D" ten Brink
#2023-04-27
#donations: VRM/VRC VJniF5bP9Acy7ce33yR4jRYSQ66Z4vGH8s

# Modifications in keijo's fork:
# Edit 2020-01-30 	Replaced GCC source since it was gone from Github
# Edit 2025-04-17 	Removed the gccinstall function and any references to manual GCC compilation.
#			Added a new install_dependencies function to manage package installation using apt, yum, or other package managers.
#			Updated the hugepages function to calculate and configure Hugepages more efficiently.
#			Preserved all other existing functionalities.
#
#GNU General Public License v3.0 see LICENSE

if [ "$(id -u)" != "0" ]; then
    echo "Sorry, you are not root or sudo."
    exit 1
fi

pkgmanager() {
    if [ "`apt-get --help 2> /dev/null`" ]; then
        pkg=apt-get
    elif [ "`yum --help 2> /dev/null`" ]; then
        pkg=yum
    elif [ "`apk --help 2> /dev/null`" ]; then
        pkg=apk
    fi
}

folder() { 
    if [ $1 -eq 0 ]; then 
        read -p "Input foldername where to create the files: " answer
    else
        answer="miner"
    fi
    
    mkdir $answer
    cd $answer
}

install_dependencies() {
    if [ "$pkg" = "apt-get" ]; then
        DEBIAN_FRONTEND=noninteractive apt-get -y -qq update > /dev/null 2>&1
        DEBIAN_FRONTEND=noninteractive apt-get -y -qq install build-essential gcc g++ make git automake autoconf pkg-config libcurl4-openssl-dev libjansson-dev libssl-dev libgmp-dev zlib1g-dev > /dev/null 2>&1
    elif [ "$pkg" = "yum" ]; then
        yum update -y > /dev/null 2>&1
        yum install -y gcc gcc-c++ make git automake autoconf libcurl-devel jansson-devel openssl-devel gmp-devel zlib-devel > /dev/null 2>&1
    elif [ "$pkg" = "apk" ]; then
        echo "Package installation for apk is under construction"
    fi
}

compilex86_64() { 
    install_dependencies

    git clone https://github.com/VeriConomy/veriumMiner > /dev/null 2>&1
    cd veriumMiner
    ./build.sh > /dev/null 2>&1
    mv cpuminer ../
    chown -R $SUDO_USER:$SUDO_USER ../*
    echo "./cpuminer"
}

hugepages() { 
    while true; do 
        if [ $1 -eq 0 ]; then 
            read -p "Use Hugepages? Yes/No [yY/nN] " answer 
        else
            answer="y"
        fi

        case $answer in
            [yY]* )  
                threads=$(grep -c ^processor /proc/cpuinfo)
                set=$(grep avx2 /proc/cpuinfo && echo 386 || echo 193)
                size=$((set*threads))

                if [ ! "`grep 'vm\.nr_hugepages=' /etc/sysctl.conf 2>/dev/null`" ]; then
                    echo vm.nr_hugepages=$size >> /etc/sysctl.conf
                else
                    sed -i "s%vm\.nr_hugepages=.*%vm.nr_hugepages=$size%" /etc/sysctl.conf
                fi

                sysctl -p
                break;;
            [nN]* )  
                break;; 
            * )    
                echo "Yes/No [yY/nN]";;
        esac 
    done 
}

runme() {
    while true; do 
        if [ $1 -eq 0 ]; then 
            read -p "Would you like to setup your mining pool RunMe? Yes/No [yY/nN] " answer 
        else
            answer="y"
        fi

        case $answer in
            [yY]* )  
                poolcreds $2 > RunMe
                chmod +x RunMe
                echo "Finished installation. Use ./RunMe in your chosen directory to start mining."
                break;;
            [nN]* )
                break;; 
            * )    
                echo "Yes/No [yY/nN]";;
        esac 
    done 
}

type=$(lscpu | grep -m 1 "Architecture:" | sed 's/[^=:]*[=:] //' | sed 's|[/ ]||g')

case $1 in
    --version|-v|version)
        echo "2.0.0"
        exit 0
        ;;
esac

while true; do 
    read -p "Use recommended settings? Yes/No [yY/nN] " answer 
    case $answer in 
        [yY]* )  
            default=1
            break;;
        [nN]* )
            default=0
            break;; 
        * )    
            echo "Yes/No [yY/nN]";;
    esac 
done 

pkgmanager

case $type in 
    x86_64) 
        folder $default
        path=$(compilex86_64 $default)
        hugepages $default
        runme $default $path
        echo "If you like what I'm doing please donate :) VRM/VRC VJniF5bP9Acy7ce33yR4jRYSQ66Z4vGH8s"
        exit 0;;
    armv71)
        folder $default
        path=$(compilearmv71 $default)
        runme $default $path
        echo "If you like what I'm doing please donate :) VRM/VRC VJniF5bP9Acy7ce33yR4jRYSQ66Z4vGH8s"
        exit 0;;
    aarch64)
        folder $default
        path=$(compileaarch64 $default)
        runme $default $path
        echo "If you like what I'm doing please donate :) VRM/VRC VJniF5bP9Acy7ce33yR4jRYSQ66Z4vGH8s"
        exit 0;;
    * )   
        echo "Your CPU Architecture is not supported. Sorry"
        exit 1;;
esac
